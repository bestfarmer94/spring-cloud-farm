server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  application:
    name: apigateway-service
  config:
    import: optional:configserver:http://localhost:8888 # 구성정보 설정
  cloud:
    config:
      name: config-service # application명 -> application.yml or 해당 파일명.yml 정보 읽음
    gateway:
      server:
        webflux:
          default-filters:
            - name: GlobalFilter
              args:
                baseMessage: Spring Cloud Gateway Webflux Global Filter
                isPreLogger: true
                isPostLogger: true
          routes:
#            - id: user-service
#              uri: lb://USER-SERVICE
#              predicates:
#                - Path=/user-service/**
            - id: user-service
              uri: lb://USER-SERVICE
              predicates:
                - Path=/user-service/login
                - Method=POST
              filters:
                - RemoveRequestHeader=Cookie
                - RewritePath=/user-service/(?<segment>.*), /\${segment}
            - id: user-service
              uri: lb://USER-SERVICE
              predicates:
                - Path=/user-service/users
                - Method=POST
              filters:
                - RemoveRequestHeader=Cookie
                - RewritePath=/user-service/(?<segment>.*), /\${segment}
            - id: user-service
              uri: lb://USER-SERVICE
              predicates:
                - Path=/user-service/actuator/**
                - Method=GET, POST
              filters:
                - RemoveRequestHeader=Cookie
                - RewritePath=/user-service/(?<segment>.*), /\${segment}
            - id: user-service
              uri: lb://USER-SERVICE
              predicates:
                - Path=/user-service/**
                - Method=GET
              filters:
                - RemoveRequestHeader=Cookie
                - RewritePath=/user-service/(?<segment>.*), /\${segment}
                - AuthorizationHeaderFilter
            - id: catalog-service
              uri: lb://CATALOG-SERVICE
              predicates:
                - Path=/catalog-service/**
            - id: order-service
              uri: lb://ORDER-SERVICE
              predicates:
                - Path=/order-service/**
            - id: first-service
              uri: lb://MY-FIRST-SERVICE
              predicates:
                - Path=/first-service/**
              filters:
#                  - AddRequestHeader=f-request, 1st-request-header-by-yaml
#                  - AddResponseHeader=f-response, 1st-response-header-by-yaml
                - CustomFilter
            - id: second-service
              uri: lb://MY-SECOND-SERVICE
              predicates:
                - Path=/second-service/**
              filters:
#                  - AddRequestHeader=s-request, 2nd-request-header-by-yaml
#                  - AddResponseHeader=s-response, 2nd-response-header-by-yaml
                - name: CustomFilter
                - name: LoggingFilter
                  args:
                    baseMessage: Hi, there.
                    isPreLogger: true
                    isPostLogger: true
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httpexchanges, busrefresh

token:
  secret: 9fe8afac25f59e6ed7c65f0c9054b00a300a58951e1af899dad103041ca3efb51b175bb9fcf8e7a9c1aed17fa0a05dc882e831b4f12670607cbd2d2da46b5543
